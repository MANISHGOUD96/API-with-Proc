//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MK_API_Proc.DB_Connection
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class APISTROEntities1 : DbContext
    {
        public APISTROEntities1()
            : base("name=APISTROEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Emp_Adress> Emp_Adress { get; set; }
        public virtual DbSet<MasterDept> MasterDepts { get; set; }
        public virtual DbSet<newEmp> newEmps { get; set; }
        public virtual DbSet<login> logins { get; set; }
    
        public virtual int DeleteData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteData", idParameter);
        }
    
        public virtual ObjectResult<GetAllData_Result> GetAllData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllData_Result>("GetAllData");
        }
    
        public virtual int InsertValue(string adressCode, string building, string zipCode, Nullable<int> id, string name, string email, string mobileNo, string depCode)
        {
            var adressCodeParameter = adressCode != null ?
                new ObjectParameter("AdressCode", adressCode) :
                new ObjectParameter("AdressCode", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var depCodeParameter = depCode != null ?
                new ObjectParameter("DepCode", depCode) :
                new ObjectParameter("DepCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertValue", adressCodeParameter, buildingParameter, zipCodeParameter, idParameter, nameParameter, emailParameter, mobileNoParameter, depCodeParameter);
        }
    
        public virtual int updatedata(Nullable<int> id, string name, string email, string mobileNo, string adressCode, string building, string zipCode, Nullable<int> depMId, string depCode, string depName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var adressCodeParameter = adressCode != null ?
                new ObjectParameter("AdressCode", adressCode) :
                new ObjectParameter("AdressCode", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var depMIdParameter = depMId.HasValue ?
                new ObjectParameter("DepMId", depMId) :
                new ObjectParameter("DepMId", typeof(int));
    
            var depCodeParameter = depCode != null ?
                new ObjectParameter("DepCode", depCode) :
                new ObjectParameter("DepCode", typeof(string));
    
            var depNameParameter = depName != null ?
                new ObjectParameter("DepName", depName) :
                new ObjectParameter("DepName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatedata", idParameter, nameParameter, emailParameter, mobileNoParameter, adressCodeParameter, buildingParameter, zipCodeParameter, depMIdParameter, depCodeParameter, depNameParameter);
        }
    
        public virtual ObjectResult<DetAllData_Result> DetAllData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetAllData_Result>("DetAllData", idParameter);
        }
    
        public virtual ObjectResult<GetDataWithId_Result> GetDataWithId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataWithId_Result>("GetDataWithId", idParameter);
        }
    
        public virtual ObjectResult<GetDataThrowId_Result> GetDataThrowId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataThrowId_Result>("GetDataThrowId", idParameter);
        }
    
        public virtual ObjectResult<GetAllDataa_Result> GetAllDataa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDataa_Result>("GetAllDataa");
        }
    
        public virtual ObjectResult<userlogien_Result> userlogien(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<userlogien_Result>("userlogien", emailParameter, passwordParameter);
        }
    
        public virtual int insertloginval(string name, string email, string password)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertloginval", nameParameter, emailParameter, passwordParameter);
        }
    }
}
